1. Explain linear search and binary search algorithms.
    Algorithm:
        1. Start from the beginning of the list.
        2. Compare each element with the target value.
        3. If the target value is found, return its index.
        4. If the end of the list is reached without finding the target, return a value indicating that the target is not present.
    Time Complexity:
        Best Case: O(1) (target is the first element).
        Average Case: O(n) (target is in the middle).
        Worst Case: O(n) (target is not in the list).
    
2. Discuss when to use each algorithm based on the data set size and order.
    Linear Search:
        Use When:
            Data Set Size: Small to moderate-sized lists.
            Order: Data is unsorted or cannot be easily sorted.
        Reason: Simple to implement and works well with unsorted data, though less efficient for larger datasets due to linear time complexity.
    Binary Search:
        Use When:
            Data Set Size: Large lists where efficiency is crucial.
            Order: Data is sorted or can be sorted beforehand.
        Reason: Much faster than linear search for large datasets due to its logarithmic time complexity, but requires the data to be sorted.